MH: 09.04.2022


=========  DataAnnotations ===============
System.ComponentModel.DataAnnotations Namespace
Provides attribute classes that are used to define metadata for ASP.NET MVC and ASP.NET data controls.
https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.dataannotations?view=net-6.0


https://asp.mvc-tutorial.com/models/data-annotations/

https://www.tutorialsteacher.com/mvc/implement-validation-in-asp.net-mvc

Mozeme pridat metadata ku property. Ak sa pouziju DataAnnotations a model sa potom pouzije mimo MVC projektu, nic sa nepokazi; 
DataAnnotations mozeme nechat v kode;

Datove nonnullable typy su vzdy pozadovane a netreba pridavat [Required]

[Required(AllowEmptyStrings = true)]   For strings you should have in mind that an empty value will be treated like a NULL value and therefore result in a validation error. 

[StringLength(50, MinimumLength = 3)]  Maximum 50, minimum 3 znaky;



[Range(1, 100)] pre numericke hodnoty; minimum=1, maximum=100


[Compare]
The [Compare] attribute allows you to set up a comparison between the property in question and another property, requiring them to match. 
A common use case for this could be to ensure that the user enters the same values in both the "Email" and the "EmailRepeated" fields:

[Compare("MailAddressRepeated")]
public string MailAddress { get; set; }

public string MailAddressRepeated { get; set; }



[CreditCard]: Validates that the property has a credit card format.
[EmailAddress]: Validates that the property has an e-mail format.
[Phone]: Validates that the property has a telephone number format.
[Url]: Validates that the property has a URL format.


[RegularExpression("[a-z]{2}-[0-9]{4}-[0-9]{4}")]  //napr. zx-1234-5678. je platny udaj
public string MemberId { get; set; }
---

PRIKLAD
public class WebUser  
{  
//attributy poskytuju frameworku uzitocne informacie pre validaciu udajov

    [Required]  uzivatel musi zadat udaj
    [StringLength(25)]  maximalny pocet znakov
    public string FirstName { get; set; }

    [Required]
    [StringLength(50, MinimumLength = 3)]
    public string LastName { get; set; }

    [Required]
    [EmailAddress]  zadany udaj musi mat format emailovej adresy
    public string MailAddress { get; set; } 
}


public class WebUser  
{  
//zobrazenie chybovych hlaseni pri nesravnom zadani udajov
    [Required(ErrorMessage = "You must enter a value for the First Name field!")]  
    [StringLength(25, ErrorMessage = "The First Name must be no longer than 25 characters!")]  
    public string FirstName { get; set; }  

    [Required(ErrorMessage = "You must enter a value for the Last Name field!")]  
    [StringLength(50, MinimumLength = 3, ErrorMessage = "The Last Name must be between 3 and 50 characters long!")]  
    public string LastName { get; set; }  

    [Required(ErrorMessage = "You must enter a value for the Mail Address field!")]  
    [EmailAddress(ErrorMessage = "Please enter a valid e-mail address!")]  
    public string MailAddress { get; set; }  
}

@using(var form = Html.BeginForm())
{
    <div>
    @Html.LabelFor(m => m.FirstName)
    @Html.TextBoxFor(m => m.FirstName)
    @Html.ValidationMessageFor(m => m.FirstName)   chybova hlaska sa objavi po kliku na button Submit vpravo od textboxu
    </div>
    ...
}


@using(var form = Html.BeginForm())
{
    @Html.ValidationSummary()   chybova hlaska sa objavi po kliku na button Submit nad oblastou kde sa edituju udaje
    
    <div>
    @Html.LabelFor(m => m.FirstName)
    @Html.TextBoxFor(m => m.FirstName)        
    </div>
    ...
}
============================================================
Udaj mozeme vypisat takto pomocou  tag helpera: Html.DisplayFor
@Html.DisplayFor(model => model.Title)

alebo aj takto
@Model.Title

---------------------------
VELMI UZITOCENE VECI
pozri : https://code-examples.net/en/q/6121c1

DisplayFor is also useful for templating. You could write a template for your Model, and do something like this:
@Html.DisplayFor(m => m)

Similar to @Html.EditorFor(m => m). It's useful for the DRY principal so that you don't have to write the same display logic over and over for the same Model.

Pouzitie formatovacieho attributu
 [DisplayFormat(DataFormatString = "{0:dd.MM.yy HH:mm}")]
 [Display(Name = "Zmenené")]
public DateTime? Zmenene { get; set; }


@Html.DisplayFor(modelItem => item.Zmenene)  nerobi problem ak Zmenene je null;

Pri priamom vypise a formatovani musime osetrit null hodnotu!!!!
  @*   @if (item.Zmenene.HasValue) item.Zmenene.Value.ToString("dd.MM.yyyy HH:mm");*@

----------------------------------

It's also useful if your Model has a Data annotation. 
For instance, if the property on the model is decorated with the  [DataType(DataType.EmailAddress )] DisplayFor will render it as a mailto: link.



      [DataType(DataType.DateTime)]
        [DisplayFormat(DataFormatString = "{0:dd.MM.yy HH:mm}")]
        [Display(Name = "Zmenené")]
        public DateTime? Zmenene { get; set; }
PRI EDITOVANI NA WEB STRANKE SA ZOBRAZI KALENDAR a s moznostou nastavenia hodin, minut a sekund.

     [DataType(DataType.Date)]
        [DisplayFormat(DataFormatString = "{0:dd.MM.yy HH:mm}", ApplyFormatInEditMode = true)]//Format pre vypis na stranke ak  sa pouzije @Html.DisplayFor(....), inac sa neformatuje!)]
        [Display(Name = "Zmenené")]
        public DateTime? Zmenene { get; set; }

PRI EDITOVANI NA WEB STRANKE SA ZOBRAZI KALENDAR len pre rok, mesiac a den !!!!

-------------------
Html.DisplayFor() will render the DisplayTemplate that matches the property's type.

If it can't find any, I suppose it invokes .ToString().

Take a look at this blog on MVC2 templates. It's still very applicable to MVC3:

http://www.dalsoft.co.uk/blog/index.php/2010/04/26/mvc-2-templates/


If you create a view named String.cshtml inside the DisplayTemplates folder of your views folder (e.g Home, or Shared) with the following code:

String.cshtml
@model string

@if (string.IsNullOrEmpty(Model)) {
   <strong>Null string</strong>
}
else {
   @Model
}

Then @Html.DisplayFor(model => model.Title) (assuming that Title is a string) will use the template and display <strong>Null string</strong> 
if the string is null, or empty.


---------

I think the main benefit would be when you define your own Display Templates, or use Data annotations.

So for example if your title was a date, you could define

[DisplayFormat(DataFormatString = "{0:d}")]

----------------------------------------------------------------------------------------------------
!!!! Toto generuje VS    ( POUZIVA ASP.NET ATTRIBUTY )   !!!!!!!!!!
  <label asp-for="ZakazkaTg" class="control-label"></label>
  <input asp-for="ZakazkaTg" class="form-control" />
  <span asp-validation-for="ZakazkaTg" class="text-danger"></span>

!!!!!!!!  Da sa to prepisat aj takto: POUZIVA Html Tag Helpers !!!!!!!!!!

  @Html.DisplayNameFor(m=>m.ZakazkaTg)
  @Html.TextBoxFor(m=>m.ZakazkaTg, new { @class="form-control"})
  @Html.ValidationMessageFor(m=>m.ZakazkaTg, "Chyba:",new { @class="text-danger"})//pod TextBoxom sa objavi popis: Chyba ma cervenu farbu;


======================================================================================================









